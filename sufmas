#include <bits/stdc++.h>
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("-O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define pb push_back
#define fst first
#define snd second
#define all(c) (c).begin(), (c).end()
using namespace std;
typedef long long ll;
typedef long double ld;
const ll INF64 = 1e18 + 228;
const int INF32 = 1e9 + 1337;
const int MOD = 1e9 + 7;
const ld eps = 1e-7;
const int N = 1e3 + 228;
void count_sort(vector<int> &p, vector<int> &c)
{
    int n = p.size();
    vector<int> cnt(n);
    for(auto& it : c)
        cnt[it]++;
    vector<int> pos(n);
    vector<int> p_new(n);
    pos[0] = 0;
    for(int i = 1; i < n; i++)
        pos[i] = pos[i - 1] + cnt[i - 1];
    for(auto& it : p)
    {
        int i = c[it];
        p_new[pos[i]++] = it;
    }
    p = p_new;
}
int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifndef __WIN32
    ifstream cin("input.txt");
    ofstream cout("output.txt");
#endif

    string s;
    cin >> s;
    s += "#";
    int n = s.size();
    vector<int> p(n), c(n);
    {
        vector< pair<char, int> > a(n);
        for(int i = 0; i < n; i++)
            a[i] = {s[i], i};
        sort(all(a));
        for(int i = 0; i < n; i++)
            p[i] = a[i].snd;
        c[p[0]] = 0;
        for(int i = 1; i < n; i++)
            c[p[i]] = (a[i].fst == a[i - 1].fst ? c[p[i - 1]] : c[p[i - 1]] + 1);
    }
    int k = 0;
    while((1 << k) < n)
    {
        for(int i = 0; i < n; i++)
            p[i] = (p[i] - (1 << k) + n) % n;
        count_sort(p, c);
        vector<int> c_new(n);
        c_new[p[0]] = 0;
        for(int i = 1; i < n; i++)
        {
            pair<int, int> prev = {c[p[i - 1]], c[(p[i - 1] + (1 << k)) % n]};
            pair<int, int> now = {c[p[i]], c[(p[i] + (1 << k)) % n]};
            c_new[p[i]] = (prev == now ? c_new[p[i - 1]] : c_new[p[i - 1]] + 1);
        }
        c = c_new;
        k++;
    }
    vector<int> lcp(n);
    k = 0;
    for(int i = 0; i < n - 1; i++)
    {
        int pi = c[i];
        int j = p[pi - 1];
        while(s[i + k] == s[j + k]) k++;
        lcp[pi] = k;
        k = max(0, k - 1);
    }
    ll ans = 0;
    for(int i = 1; i < n; i++)
    {
        ans += (n - p[i] - 1) - lcp[i];
    }
    cout << ans;
    return 0;
}
